name: Build and Deploy to App Runner

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-southeast-1

permissions:
  id-token: write
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-output.outputs.image_tag }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set IMAGE_TAG
        id: set-output
        run: echo "image_tag=$(echo $GITHUB_SHA | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Build and Push Docker image
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.set-output.outputs.image_tag }} .
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.set-output.outputs.image_tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update App Runner service
        env:
          APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
          ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
        run: |
          aws apprunner update-service \
            --service-arn "$APP_RUNNER_SERVICE_ARN" \
            --source-configuration "ImageRepository={ImageIdentifier=$ECR_REPOSITORY_URI:${{ needs.build.outputs.image_tag }},ImageRepositoryType=ECR}"
